{% extends 'base.html.twig' %}

{% block title %}Scroll Page{% endblock %}

{% block body %}
<style>

    body {
        color: #000;
    }

    .hoverNavA {
        color: #000;
    }

    .hoverNavA:hover {
        background-color: rgba(219, 233, 238, 0.5);
    }

    .titleName {
        font-family: 'Pacifico', cursive;
    }

    .zIndex {
        z-index: 10;
    }

    .example-wrapper {
        position: relative;
        max-width: 100vw;
        height: 100vh;
    }

    .scroll-card {
        position: absolute;
        box-shadow: rgba(0, 0, 0, 0.08) 2px 2px 2px;
        border-radius: 15px;
        background-color: white;
        width: 300px;
        height: 430px;
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        top: 10px;
        overflow: hidden;
        left: 50%;
        transform: translate(-50%, 10%) scale(1.1);
        user-select: none;
    }
    
    h2 {
        margin: 1px;
        
    }

    .scroll-card img {
        height: 300px;
        object-fit: contain;
        transition: transform 0.3s;
         pointer-events: none; 
         user-select: none;
    }

    img:hover {
        transform: scale(1.02) rotate(1deg);
    }

    .card-body {
        width: 100%;
        background-color: white;
        z-index:2;
        line-height: 1;
        text-align: center;
    }

    .animation {
        position: fixed;
        z-index: 3;
        height: 150px;
        width: 150px;
        display: flex;
        justify-content: center;
        align-items: center;
        border-radius: 50%;
        left: 50%;
        top: 150px;
        animation: animate 1.1s;
    }

    .like {
        border: 10px solid #00ff11;
        color: #00ff11;
    }

    .match {
        top: 120px;
        font-family: 'Pacifico', cursive;
        text-align: center;
        color: #00ff11;
        font-size: 50px;
        /*font-weight: bold;*/
        text-shadow: 2px 2px 0 grey;
        background-image: url('https:\/\/robotdog.thomastestaud.com\/mancho\/Pingo.gif');
        background-size: cover;
        background-position: 60% 60%;
         height: 250px;
        width: 250px;
        animation: animate 3s;
    }

    .btn-choice {
        position: fixed;
        top: 600px;
        left: 50%;
        transform: translate(-50%, 0%);
        min-width: 60%;
        display: flex;
        justify-content: space-between;
    }

    .btn-choice button {
        height: 100px;
        width: 100px;
        border-radius: 50%;
        z-index: 3;
        font-weight: bold;
        color: #4F6D7A;
        border: none;
        transition: transform 0.4s;
    }

    .btn-choice button:hover {
        transform: scale(1.1);
    }

    .btn-choice button:active {
        transform: scale(0.95);
    }

    .btn-choice button svg {
        height: 60%;
    }

    .btnlike-btn {
        background-color:#EC3254;
    }

    .like-btn {
        background-color: green;
    }


    .btnlike-btn svg {
        color: white;
    }

    .like-btn svg {
        color: white;
    }


    .dislike {
        border: 10px solid red;
        color: red;
    }

    .animation svg {
        height: 100px;
        width: 100px;
    }

    .none {
        display: none;
    }

    footer {
        position: absolute;
        bottom: 3%;
        left: 50%;
        transform: translate(-50%, -2%);
    }

    footer p {
        font-size: 10px;
        font-weight:300;
        text-transform: capitalize;
    }

    @keyframes animate {
        0% {
            opacity: 0;
            transform: rotate(10deg) translate(-50%, 20%) scale(0.5);
        }
        30% {
            opacity: 1;
            transform: rotate(0deg) translate(-50%, 0%) scale(1);
        }
        80% {
            opacity: 1;
            transform: rotate(0deg) translate(-50%, 0%) scale(1);
        }
        100% {
            opacity: 0;
            transform: translate(-50%, 0%) scale(0.5);
        }
    }

    

</style>

<nav class="navbar navbar-expand-lg navbar-white bg-white w-100 zIndex">
    <div class="container">
        <a class="navbar-brand titleName" href="/">PingoMatch</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ml-auto ">
                <li class="nav-item">
                    <a class="nav-link btn hoverNavA" href="/">Accueil</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link btn hoverNavA" href="/mached">Vos matchs</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link btn hoverNavA" href="/profile">Votre profil</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link btn btn-danger" href="/home">Déconnexion</a>
                </li>

            </ul>
        </div>
    </div>
</nav>

<div class="example-wrapper">
    <p class="text-center pt-5">Vous avez parcouru tous les utilisateurs...</p>
    {% for item in users %}
    <div class="scroll-card card border-secondary mb-3">
        <img src="{{ item.img }}" class="card-img-top" alt="{{ item.Name }}">
        <div class="card-body">
            <h2 class="card-title pingo-name">{{ item.Name }}</h2>
            <p class="card-text">{{ item.Description }}</p>
        </div>
    </div>
            <div class="btn-choice">
                <button class="btnlike-btn">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">  <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" /></svg>
                </button>
                <button class="like-btn">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">  <path stroke-linecap="round" stroke-linejoin="round" d="M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12z" /></svg>
                </button>
            </div>
    {% endfor %}
    <p id="user-data" style="display:none;">{{usersJson}}<p>
    <div id="animDisplay"></div>
</div>

    <footer>
        <p class="text-black">© PingoMatch, Haute-Savoie, Annecy | 2023</p>
    </footer>

<script>
    const scrollCard = document.querySelectorAll('.scroll-card');
    const likeBtn = document.querySelectorAll('.like-btn');
    const dislikeBtn = document.querySelectorAll('.btnlike-btn');
    const pingoName = document.querySelectorAll('.pingo-name');
    const choiceBtn = document.querySelectorAll('.btn-choice');
    const myUser = localStorage.getItem('myUser');
    let userData = JSON.parse(document.getElementById('user-data').innerHTML);
    const animDisplay = document.getElementById('animDisplay');
    let matchedArray = [];

    
    likeBtn.forEach((el, index) => {
        el.addEventListener('click', () => {
            let posX = window.innerWidth/2;
            offset = window.innerWidth/2;
            let opacity = 1;
            let run = setInterval(() => {
                scrollCard[index].style = ` 
                    left: ${posX-150}px;
                    top: ${(Math.abs(posX-offset))/Math.log(Math.abs(posX-offset)*Math.abs(posX-offset))+8}px;
                    transform: rotate(${(posX-offset)/40}deg) translate(0%, 10%) scale(1.1);
                    opacity: ${opacity};`;
                posX+=10;
                opacity-= 0.007;
            }, 10);
            setTimeout(() => {
                scrollCard[index].classList.add('none');
                choiceBtn[index].classList.add('none');
                clearInterval(run);
            }, 1000);

            if(didTheyMatch()) {
                setTimeout(() => {
                    match();
                }, 1100);
            matchedArray.push(pingoName[index].innerHTML);
            localStorage.setItem("matched", matchedArray);
            console.log(localStorage.getItem("matched"));
            }
            
            likePingo();
        });
    });

    dislikeBtn.forEach((el, index) => {
        el.addEventListener('click', () => {
            let posX = window.innerWidth/2;
            offset = window.innerWidth/2;
            let opacity = 1;
            let run = setInterval(() => {
                scrollCard[index].style = ` 
                    left: ${posX-150}px;
                    top: ${(Math.abs(posX-offset))/Math.log(Math.abs(posX-offset)*Math.abs(posX-offset))+8}px;
                    transform: rotate(${(posX-offset)/40}deg) translate(0%, 10%) scale(1.1);
                    opacity: ${opacity};`;
                posX-=10;
                opacity-= 0.007;
            }, 10);
            setTimeout(() => {
                scrollCard[index].classList.add('none');
                choiceBtn[index].classList.add('none');
                clearInterval(run);
            }, 1000);
            dislike();
        });
    });
    
    userData = JSON.parse(userData);
    scrollCard.forEach((card, index) => {
        if (userData[index].Name === myUser) {
            scrollCard[index].classList.add('none');
            choiceBtn[index].classList.add('none');
            //console.log('doublon');
        }
    });
    
    let mouseClick = false;
    let offset = null;
    scrollCard.forEach((card, index) => {
        card.addEventListener('mousemove', () => {
            if (mouseClick) {
                let e = window.event;
                var posX = e.clientX;
                var posY = e.clientY;
                card.style = `left: ${posX-150}px;
                                top: ${(Math.abs(posX-offset))/Math.log(Math.abs(posX-offset)*Math.abs(posX-offset))+8}px;
                                transform: rotate(${(posX-offset)/40}deg) translate(0%, 10%) scale(1.1);
                                opacity:${Math.cos(Math.abs(posX-offset)/200)};`;
                let ww = window.innerWidth;
                
                if(posX-offset > 200) {
                    mouseClick = false;
                    scrollCard[index].classList.add('none');
                    choiceBtn[index].classList.add('none');
                    if(didTheyMatch()) {
                        setTimeout(() => {
                            match();
                        }, 1100);
                    matchedArray.push(pingoName[index].innerHTML);
                    localStorage.setItem("matched", matchedArray);
                    console.log(localStorage.getItem("matched"));
                    }
                    likePingo();
                }
                
                if(posX-offset < -200) {
                    scrollCard[index].classList.add('none');
                    choiceBtn[index].classList.add('none');
                    mouseClick = false;
                    dislike();
                }
                
            }

        })
        card.addEventListener('mousedown', () => {
            mouseClick = true;

            let e = window.event;
            var posX = e.clientX;
            offset = posX;
        })
        card.addEventListener('mouseup', () => {
            mouseClick = false;
            offset = null;
        })
    });

    function likePingo() {
        animDisplay.innerHTML = `
        <div class="animation like">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6"><path stroke-linecap="round" stroke-linejoin="round" d="M4.5 12.75l6 6 9-13.5" /></svg>
        </div>
        `;
        setTimeout(() => {
            animDisplay.innerHTML = '';
        }, 1000);
    }

    function dislike() {
        animDisplay.innerHTML = `
        <div class="animation dislike">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6"><path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" /></svg>
        </div>
        `;
        setTimeout(() => {
            animDisplay.innerHTML = '';
        }, 1000);
    }

    function match() {
        animDisplay.innerHTML = `
        <div class="animation match">
            <p>It's a match!!</p>
        </div>
        `;
        setTimeout(() => {
            animDisplay.innerHTML = '';
        }, 2900);
    }

    function didTheyMatch() {
        let num = Math.random();
        console.log(num)
        if(num > 0.5) {
            return true;
        }else {
            return false;
        }
    }

</script>
{% endblock %}
